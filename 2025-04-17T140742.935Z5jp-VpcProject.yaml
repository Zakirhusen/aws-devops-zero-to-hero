AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template to create a VPC with public and private subnets
# Parameters:
#   VpcCidr:
#     Type: String
#     Default: 10.0.0.0/16
#     Description: The CIDR block for the VPC

Resources:
  # create a VPC
  MyVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: CftProjectVpc

  # create a internet gateway
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CftProjectInternetGateway

  # attach the internet gateway to the VPC
  MyVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVpc
      InternetGatewayId: !Ref MyInternetGateway

  # create a two public subnets
  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: eu-north-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: CftProjectPublicSubnet1

  publicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: eu-north-1b
      Tags:
        - Key: Name
          Value: CftProjectPublicSubnet2

  # create a public route table
  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: CftProjectPublicRouteTable

  # create a route to the internet gateway
  RouteToIGW:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref publicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  # associate the public subnet 2 with the public route table
  publicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet1
      RouteTableId: !Ref publicRouteTable

  # associate the public subnet 2 with the public route table
  publicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet2
      RouteTableId: !Ref publicRouteTable

  # create a two private subnet
  privateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: eu-north-1a
      Tags:
        - Key: Name
          Value: CftProjectPrivateSubnet1
          
  privateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: eu-north-1b
      Tags:
        - Key: Name
          Value: CftProjectPrivateSubnet2

  # create a private route table
  privateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: CftProjectPrivateRouteTable

  # associate the private subnet 1 with the private route table
  privateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateSubnet1
      RouteTableId: !Ref privateRouteTable

  # associate the private subnet 2 with the private route table
  privateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateSubnet2
      RouteTableId: !Ref privateRouteTable

  # create a NAT gateway
  MyNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyEIP.AllocationId
      ConnectivityType: public
      SubnetId: !Ref publicSubnet1
      Tags:
        - Key: Name
          Value: CftProjectNatGateway

  # create an Elastic IP
  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # create a route from private route table to NAT gateway
  routeFromPrivateRouteTableToNatGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref privateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNatGateway


  # create a security group for the bastion host
  BastionHostSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow ssh  only
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  # creating bastion host in public subnet 1
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: ami-0c1ac8a41498c1a9c
      SubnetId: !Ref publicSubnet1
      KeyName: zakir-aws-login-key
      SecurityGroupIds:
        - !Ref BastionHostSG
      Tags:
        - Key: Name
          Value: bastion-host

  # create a security group for the private subnet

  AppServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow ssh only
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # creating launch configuration
  myLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    # vpcId: !Ref MyVpc
    Properties:
      LaunchTemplateName: myLaunchTemplate
      LaunchTemplateData:
        InstanceType: t3.micro
        ImageId: ami-0c1ac8a41498c1a9c
        KeyName: zakir-aws-login-key
        SecurityGroupIds:
          - !Ref AppServerSG
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt update -y
            cat <<EOF> /home/ubuntu/index.html
            <!DOCTYPE html>
            <html>
            <body>
            <h1>My this my server1</h1>
            <p>My server2</p>
            </body>
            </html>
            EOF
            cd /home/ubuntu
            sudo python3 -m http.server 80
  
  myLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: my-load-balancer
      Subnets:
        - !Ref publicSubnet1
        - !Ref publicSubnet2
      SecurityGroups:
        - !Ref BastionHostSG
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: my-load-balancer
  myTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: my-target-group
      VpcId: !Ref MyVpc
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: my-target-group
  
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref myLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref myTargetGroup

  # creating Autoscaling group to launch ec2 instance in private subnets
  MyAutoScalingGroup:
    
    Type: AWS::AutoScaling::AutoScalingGroup
    # vpcId: !Ref MyVpc
    DependsOn: myLaunchTemplate
    Properties:
      VPCZoneIdentifier:
        - !Ref privateSubnet1
        - !Ref privateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate
        Version: !GetAtt myLaunchTemplate.LatestVersionNumber 
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      LoadBalancerNames:
        - !Ref myLoadBalancer
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref myTargetGroup
      Tags:
        - Key: Name
          Value: MyAutoScalingGroup
          PropagateAtLaunch: true
          
# outputs
Outputs:
  loadBalancerDNSName:
    Value: !GetAtt myLoadBalancer.DNSName
    Description: Load Balancer DNS Name
  VpcId:
    Value: !Ref MyVpc
    Description: VPC ID
  PublicSubnet1:
    Value: !Ref publicSubnet1
    Description: Public Subnet 1
  PublicSubnet2:
    Value: !Ref publicSubnet2
    Description: Public Subnet 2
  PrivateSubnet1:
    Value: !Ref privateSubnet1
    Description: Private Subnet 1
  PrivateSubnet2:
    Value: !Ref privateSubnet2
    Description: Private Subnet 2
  NatGateway:
    Value: !Ref MyNatGateway
    Description: NAT Gateway
  ElasticIP:
    Value: !Ref MyEIP
    Description: Elastic IP
